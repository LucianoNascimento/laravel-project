Routes


Route::get('admin-home', 'MyController@adminHome'); // admin-home
Route::get('admin-logout', 'MyController@adminLogout'); // logout
Route::get('admin-sign-in', 'MyController@adminShowLogin'); // login
Route::post('admin-sign-in', 'MyController@adminDoLogin'); // login
Route::get('admin-representative-list','MyController@adminGetReptList');
Route::get('admin-agent-list','MyController@adminGetAgentList');
Route::get('admin-profile/{id}','MyController@adminProfile');

//ajax for admin
Route::get('admin-confirm-Rept/{id}','MyController@adminReptConfirm');
Route::get('admin-cancel-Rept/{id}','MyController@adminReptCancel');
Route::get('admin-confirm-Agent/{id}','MyController@adminAgentConfirm');
Route::get('admin-cancel-Agent/{id}','MyController@adminAgentCancel');


----controller function
 public function adminShowLogin()
    {
        return view('admin.admin-login');
    }

    public function adminDoLogin(Request $request)
    {
        
        $this->validate($request, [
            'username' => 'required|string|max:255',
            'password' => 'required|string|min:6',
        ]);
        $username=$request->get('username');
        $password=$request->get('password');



        $super_admin=DB::table('admins')->where('username',$username)->value('super_adminID');

        if($super_admin==null)
            return view('admin.admin-login')->with('adminwrong','This account is not confirmed yet.');

        
        $pass = DB::table('admins')->where('username',$username)->value('password');
        //Hash::check($password,$pass)
        if($password==$pass){

            $id=DB::table('admins')->where('username',$username)->value('id');
            Session::put('admin-username',$username);
            Session::put('adminID',$id);

            return redirect('admin-home');//redirect()->route('sign-in');
        }
        
      
        return view('admin.admin-login')->with('adminwrong','username or password wrong');//redirect()->route('sign-in');
    }
    public function adminLogout(){
        Session::forget('admin-username');
        Session::forget('adminID');
        //return redirect()->route('/');
        //Auth::logout();
        return view('admin.admin-login');
    }
    public function adminHome()
    {
        
        return view('admin.admin-home');
    }
    public function adminCreate()
    {
        //if (Session::has('username')) echo  'ok-ckeck';
        //else
        //$admin=DB::table('representatives')->where('username',$id)->value('adminID');
        return view('admin.admin-register');
    }
    public function adminStore(Request $request)
    {
        $this->validate($request, [
            'username' => 'required|string|max:255|unique:admins',
            'password' => 'required|string|min:6|confirmed',
            'enterprise' => 'required|string|max:255',
        ]);
        $password=Hash::make($request->get('password'));
        $representative=new Admin([
            'username' => $request->get('username'),
            'password' => $password,
            'enterprise' => $request->get('enterprise')
        ]);
        //$representative->save();
        echo 'hello';
       // return redirect('admin-sign-in');
    }
    public function adminProfile($id){

        
        $user = DB::table('admins')
            ->select('username','enterprise','created_at','updated_at')
            ->where('username', $id)->get();
    
        
        $user_name=$created=$updated=$userID=$adminID=$enterprise_name=$addressID=$infoID="";
        $i=0;
        foreach ($user as $userdata){
    
            foreach ($userdata as $data){
                if($i==0) $user_name=$data;
                elseif($i==1) $enterprise_name=$data;
                elseif($i==2) $created=$data;
                elseif($i==3) $updated=$data;
            
                $i=$i+1;
                
            }
        }
    
    
        
    
       
    
    
        $created=date("d/m/Y",strtotime($created));
        $updated=date("d/m/Y",strtotime($updated));
    
       //return $trips_details;
        
        //echo $num_trips;
    
    return view('admin.admin-profile',['username' => $user_name,'c' => $created,'u' => $updated,'enterprise' => $enterprise_name]);
    }

   

    public function adminConfirmTicket($id){
        DB::table('tickets')->where('id',$id)
            ->update(['status' => 'active']);

        $paymentID=DB::table('tickets')->where('id',$id)->value('paymentID');
        DB::table('tickets')->where('id',$paymentID)
            ->update(['status' => 'paid']);

        $places=DB::table('buses')->distinct()->select('name')->get();
        $tickets=DB::table('tickets')->where('tickets.status','pending')
            ->join('payments','tickets.paymentID','payments.id')
            ->join('users','tickets.userID','users.id')
            ->select('users.username','users.phone no','tickets.boarding_point','tickets.booking_time',
                'payments.trxID','payments.amount','tickets.status','tickets.id')->get();

        return view('admin.ticket-list-confirm')->with('buses',$places)->with('tickets',$tickets);

    }

    public function adminGetReptList(){

        $admin = \Illuminate\Support\Facades\Session::get('admin-username');

        $enterprise = DB::table('admins')->where('username',$admin)->value('enterprise');

        $reptList= DB::table('representatives')
                        ->join('admin_infos','representatives.admin_infoID','=','admin_infos.id')
                        ->join('addresses','representatives.addressID','=','addresses.id')                    
                        ->where('representatives.enterprise',$enterprise)
                        ->select('representatives.id','representatives.adminID','admin_infos.first_name','admin_infos.last_name','admin_infos.email','admin_infos.phone_no','addresses.name','addresses.thana','addresses.district','addresses.house_road')
                        ->get();
        $total_rept = count($reptList);
        //return $reptList;
       return view('admin.admin-representative')->with('reptList',$reptList)->with( 'total_rept',$total_rept);

    }
    public function adminGetAgentList(){

        $admin = \Illuminate\Support\Facades\Session::get('admin-username');

        $enterprise = DB::table('admins')->where('username',$admin)->value('enterprise');
        

        $reptList= DB::table('agents')
                        ->join('admin_infos','agents.admin_infoID','=','admin_infos.id')
                        ->join('addresses','agents.addressID','=','addresses.id')                    
                        ->where('agents.enterprise',$enterprise)
                        ->select('agents.id','agents.adminID','admin_infos.first_name','admin_infos.last_name','admin_infos.email','admin_infos.phone_no','addresses.name','addresses.thana','addresses.district','addresses.house_road')
                        ->get();
        $total_agent = count($reptList);
        //return $reptList;
       return view('admin.admin-agent')->with('reptList',$reptList)->with( 'total_agent',$total_agent);

    }
    function adminReptConfirm ($reptID)
    {   
        $adminID = \Illuminate\Support\Facades\Session::get('adminID');
        echo $adminID;
       $affected =  DB::table('representatives')
        ->where('id', $reptID)
        ->update(['adminID' => $adminID,'updated_at' => date("Y-m-d H:i:s")]);

    }

    function adminReptCancel ($reptID)
    {   
        $adminID = \Illuminate\Support\Facades\Session::get('adminID');
        echo $adminID;
       $affected =  DB::table('representatives')
        ->where('id', $reptID)
        ->update(['adminID' => '','updated_at' => date("Y-m-d H:i:s")]);

    }
    function adminAgentConfirm ($reptID)
    {   
        $adminID = \Illuminate\Support\Facades\Session::get('adminID');
        echo $adminID;
       $affected =  DB::table('agents')
        ->where('id', $reptID)
        ->update(['adminID' => $adminID,'updated_at' => date("Y-m-d H:i:s")]);

    }

    function adminAgentCancel ($reptID)
    {   
        $adminID = \Illuminate\Support\Facades\Session::get('adminID');
        echo $adminID;
       $affected =  DB::table('agents')
        ->where('id', $reptID)
        ->update(['adminID' => '','updated_at' => date("Y-m-d H:i:s")]);
       

    }